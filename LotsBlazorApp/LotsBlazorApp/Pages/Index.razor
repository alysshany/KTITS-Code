@page "/"
@using MudBlazor;
@using Data;
@using OpenQA.Selenium;
@using OpenQA.Selenium.Chrome;
@using System.Net;
@using OpenQA.Selenium.Support.UI;
@using SeleniumExtras.WaitHelpers;
@using System.Collections.ObjectModel;
@using System.Text;
@inject NavigationManager _navigationManager
@inject DBConnection db

<PageTitle>Index</PageTitle>

<MudPaper Height="30px" Width="100%">
</MudPaper>
<MudPaper >
    <MudPaper>
        <MudTable Items="@lots" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Style="margin: 10px">
            <HeaderContent>
                <MudTh>Номер лота</MudTh>
                <MudTh>Наименование</MudTh>
                <MudTh>Категория</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Номер лота" @onclick="() => OnButtonClicked(context)">@context.NumberOfLot</MudTd>
                <MudTd DataLabel="Наименование" @onclick="() => OnButtonClicked(context)">@context.Title</MudTd>
                <MudTd DataLabel="Категория" @onclick="() => OnButtonClicked(context)">@context.ObjectCategory</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudPaper>
<MudPaper Height="30px" Width="100%">
</MudPaper>
<MudPaper Style="margin: 10px; align-items: center;">
    <MudButton Variant="Variant.Outlined" @onclick="SavingToDataBase">Загрузить лоты в базу данных</MudButton>
    <MudButton Variant="Variant.Outlined" @onclick="SavingToFile">Загрузить лоты в диск C</MudButton>
</MudPaper>
@code {

    private List<LotInfo> lots;
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = true;

    public static List<string> listOfLotCategories = new List<string>
        {
            "Земли сельскохозяйственного назначения",
            "Земли населенных пунктов",
            "Земли специального назначения",
            "Земли особо охраняемых территорий и объектов",
            "Земли лесного фонда",
            "Земли водного фонда",
            "Земельные участки (категория не установлена)",
            "Земельные участки (не образованы)",
        };

    public static List<string> listOfCategoriesThatHavePurpose = new List<string>
        {
            "Земли особо охраняемых территорий и объектов",
            "Земельные участки (не образованы)",
        };

    public static List<string> listOfCategoriesThatDontHavePurpose = new List<string>
        {
            "Земли сельскохозяйственного назначения",
            "Земли населенных пунктов",
            "Земли специального назначения",
            "Земли лесного фонда",
            "Земли водного фонда",
            "Земельные участки (категория не установлена)",
        };

    protected override void OnInitialized()
    {
        lots = db.ImportAllLots();
    }

    [Inject] private IDialogService DialogService { get; set; }


    private async void OnButtonClicked(LotInfo lot)
    {
        bool? result = await DialogService.ShowMessageBox(

            lot.Title, 
            (MarkupString)$"<img src={lot.ImageUrl} width=300 height=300> <br /> Категория: {lot.ObjectCategory}. <br /> Начальная цена: {lot.StartingPrice}, шаг: {lot.AuctionStep}. <br /> Описание: {lot.LotDescription}",
        cancelText:"Cancel");
        StateHasChanged();
    }

    public void SavingToFile()
    {
        IWebDriver driver = new ChromeDriver();
        WebClient client = new WebClient();
        var listOfLinks = new List<string>();
            

        driver.Navigate().GoToUrl("https://torgi.gov.ru/new/public/lots/reg");

        //Прокрутка всей сраницы. P.S. Может занять очень много времени
        //IList<IWebElement> showMoreButtons = driver.FindElements(By.XPath("//*[contains(text(), 'Показать еще')]"));

        //// Нажимаем кнопки, пока они не исчезнут
        //while (showMoreButtons.Count > 0)
        //{
        //    foreach (IWebElement button in showMoreButtons)
        //    {
        //        try
        //        {
        //            button.Click();
        //        }
        //        catch (Exception)
        //        {
        //            // Игнорируем исключения, если кнопка больше не найдена
        //        }
        //    }
        //    showMoreButtons = driver.FindElements(By.XPath("//*[contains(text(), 'Показать еще')]"));
        //}

        // Находим высоту страницы
        IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
        long scrollHeight = (long)js.ExecuteScript("return Math.max( document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight );");

        // Прокручиваем страницу до конца
        for (int i = 0; i < scrollHeight; i += 100)
        {
            js.ExecuteScript($"window.scrollTo(0, {i});");
        }

        //Скачиваем все ссыылки на лоты с страницы
        WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(80));
        wait.Until(SeleniumExtras.WaitHelpers.ExpectedConditions.ElementExists(By.CssSelector("a[class='lotLink'][target='_blank']")));
        ReadOnlyCollection<IWebElement> links = driver.FindElements(By.CssSelector("a[class='lotLink'][target='_blank']"));

        foreach (IWebElement link in links)
        {
            listOfLinks.Add(link.GetAttribute("href"));
        }

        //Проходимся по каждой ссылке
        for (var i = 0; i < links.Count; i++)
        {
            // переход на страницу
            driver.Navigate().GoToUrl(listOfLinks[i]);

            var ww = new WebDriverWait(driver, TimeSpan.FromSeconds(60));
            ww.Until(ExpectedConditions.ElementExists(By.CssSelector("div[class='lots-item']")));

            var lotId = listOfLinks[i].Split('/')[7];
            var lotTitle = driver.FindElement(By.CssSelector(".header_title")).Text;
            var lotsInfoPrices = driver.FindElements(By.CssSelector("div[class='prices__row__price-cell lotPrice']")).ToList();
            var category = driver.FindElement(By.CssSelector("app-entity-attribute-simple[attributename='Категория объекта']")).FindElement(By.CssSelector("div[class='attr_value']")).Text.Trim();

            if (listOfLotCategories.Contains(category))
            {
                var startingPrice = "Нет данных";
                var auctionStep = "Нет данных";

                if (lotsInfoPrices.Count > 0)
                {
                    //Начальная цена
                    startingPrice = lotsInfoPrices[0].Text;
                    //Шаг аукциона
                    auctionStep = lotsInfoPrices[1].Text;
                }

                //Вид торгов
                var lotType = ((driver.FindElement(By.XPath("//*[contains(text(), ' Вид торгов ')]"))).FindElement(By.XPath(".."))).FindElement(By.CssSelector("div[class='lotAttributeValue']")).Text.Trim();
                //Предмет торгов(наименование лота)
                var lotSub = ((driver.FindElement(By.XPath("//*[contains(text(), ' Предмет торгов (наименование лота) ')]"))).FindElement(By.XPath(".."))).FindElement(By.CssSelector("div[class='attr_value']")).Text.Trim();
                //Описание лота
                var lotDescription = driver.FindElement(By.CssSelector("app-entity-attribute-simple[attributename='Описание лота']")).FindElement(By.CssSelector("div[class='attr_value']")).Text.Trim();
                //Субъект местонахождения имущества
                var locationSubject = ((driver.FindElement(By.XPath("//*[contains(text(), ' Субъект местонахождения имущества ')]"))).FindElement(By.XPath(".."))).FindElement(By.CssSelector("div[class='lotAttributeValue']")).Text.Trim();
                //Местонахождение имущества
                var location = driver.FindElement(By.CssSelector("app-entity-attribute-simple[attributename='Местонахождение имущества']")).FindElement(By.CssSelector("div[class='attr_value']")).Text.Trim();
                //Категория объекта
                var objectCategory = driver.FindElement(By.CssSelector("app-entity-attribute-simple[attributename='Категория объекта']")).FindElement(By.CssSelector("div[class='attr_value']")).Text.Trim();
                //Форма собственности
                var ownershipForm = ((driver.FindElement(By.XPath("//*[contains(text(), ' Форма собственности ')]"))).FindElement(By.XPath(".."))).FindElement(By.CssSelector("div[class='attr_value']")).Text.Trim();
                //Цель предоставления земельного участка
                //Нет у Земли сельскохозяйственного назначения, Земли населенных пунктов, Земли специального назначения, Земли лесного фонда, Земли водного фонда, Земельные участки (категория не установлена)
                //Есть у Земли особо охраняемых территорий и объектов, Земельные участки (не образованы)
                var landPurpose = "Нет данных";

                if (listOfCategoriesThatHavePurpose.Contains(category))
                {
                    landPurpose = ((driver.FindElement(By.XPath("//*[contains(text(), ' Цель предоставления земельного участка ')]"))).FindElement(By.XPath(".."))).FindElement(By.CssSelector("div[class='attr_value']")).Text.Trim();
                }

                string baseDirectory = "C:\\Lots\\";
                string lotDirectory = baseDirectory + lotId;

                if (!Directory.Exists(lotDirectory))
                {
                    Directory.CreateDirectory(lotDirectory);
                }



                // Создаем файл info.txt и записываем в него характеристики земельного участка
                var infoFilePath = Path.Combine(lotDirectory, "info.txt");
                using (var infoFile = new StreamWriter(infoFilePath, false, Encoding.UTF8))
                {
                    infoFile.WriteLine($"Наименование: {lotTitle}");
                    infoFile.WriteLine($"Начальная цена: {startingPrice}");
                    infoFile.WriteLine($"Шаг аукциона: {auctionStep}");
                    infoFile.WriteLine($"Вид торгов: {lotType}");
                    infoFile.WriteLine($"Предмет торгов (наименование лота): {lotSub}");
                    infoFile.WriteLine($"Описание лота: {lotDescription}");
                    infoFile.WriteLine($"Субъект местонахождения имущества: {locationSubject}");
                    infoFile.WriteLine($"Местонахождение имущества: {location}");
                    infoFile.WriteLine($"Категория объекта: {objectCategory}");
                    infoFile.WriteLine($"Форма собственности: {ownershipForm}");

                    infoFile.WriteLine($"Цель предоставления земельного участка: {landPurpose}");
                }

                // Скачиваем изображение, если оно есть
                try
                {
                    var imgUrl = driver.FindElement(By.CssSelector("img[class='selected-image-list-item']")).GetAttribute("src");
                    var imgFileName = "image.png";
                    var imgFilePath = Path.Combine(lotDirectory, imgFileName);

                    client.DownloadFile(imgUrl, imgFilePath);
                }
                catch (NoSuchElementException)
                {
                    // Нет изображения
                }
            }

        }

        // закрытие браузера
        driver.Quit();
        _navigationManager.NavigateTo("/");
        
    }

    public void SavingToDataBase()
    {
        IWebDriver driver = new ChromeDriver();
        WebClient client = new WebClient();
        var listOfLinks = new List<string>();


        driver.Navigate().GoToUrl("https://torgi.gov.ru/new/public/lots/reg");

        //Прокрутка всей сраницы. P.S. Может занять очень много времени
        //IList<IWebElement> showMoreButtons = driver.FindElements(By.XPath("//*[contains(text(), 'Показать еще')]"));

        //// Нажимаем кнопки, пока они не исчезнут
        //while (showMoreButtons.Count > 0)
        //{
        //    foreach (IWebElement button in showMoreButtons)
        //    {
        //        try
        //        {
        //            button.Click();
        //        }
        //        catch (Exception)
        //        {
        //            // Игнорируем исключения, если кнопка больше не найдена
        //        }
        //    }
        //    showMoreButtons = driver.FindElements(By.XPath("//*[contains(text(), 'Показать еще')]"));
        //}

        // Находим высоту страницы
        IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
        long scrollHeight = (long)js.ExecuteScript("return Math.max( document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight );");

        // Прокручиваем страницу до конца
        for (int i = 0; i < scrollHeight; i += 100)
        {
            js.ExecuteScript($"window.scrollTo(0, {i});");
        }

        //Скачиваем все ссыылки на лоты с страницы
        WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(80));
        wait.Until(SeleniumExtras.WaitHelpers.ExpectedConditions.ElementExists(By.CssSelector("a[class='lotLink'][target='_blank']")));
        ReadOnlyCollection<IWebElement> links = driver.FindElements(By.CssSelector("a[class='lotLink'][target='_blank']"));

        foreach (IWebElement link in links)
        {
            listOfLinks.Add(link.GetAttribute("href"));
        }

        //Проходимся по каждой ссылке
        for (var i = 0; i < links.Count; i++)
        {
            // переход на страницу
            driver.Navigate().GoToUrl(listOfLinks[i]);

            var ww = new WebDriverWait(driver, TimeSpan.FromSeconds(60));
            ww.Until(ExpectedConditions.ElementExists(By.CssSelector("div[class='lots-item']")));

            var lotId = listOfLinks[i].Split('/')[7];
            var lotTitle = driver.FindElement(By.CssSelector(".header_title")).Text;
            var lotsInfoPrices = driver.FindElements(By.CssSelector("div[class='prices__row__price-cell lotPrice']")).ToList();
            var category = driver.FindElement(By.CssSelector("app-entity-attribute-simple[attributename='Категория объекта']")).FindElement(By.CssSelector("div[class='attr_value']")).Text.Trim();

            if (listOfLotCategories.Contains(category))
            {
                var startingPrice = "Нет данных";
                var auctionStep = "Нет данных";

                if (lotsInfoPrices.Count > 0)
                {
                    //Начальная цена
                    startingPrice = lotsInfoPrices[0].Text;
                    //Шаг аукциона
                    auctionStep = lotsInfoPrices[1].Text;
                }

                //Вид торгов
                var lotType = ((driver.FindElement(By.XPath("//*[contains(text(), ' Вид торгов ')]"))).FindElement(By.XPath(".."))).FindElement(By.CssSelector("div[class='lotAttributeValue']")).Text.Trim();
                //Предмет торгов(наименование лота)
                var lotSub = ((driver.FindElement(By.XPath("//*[contains(text(), ' Предмет торгов (наименование лота) ')]"))).FindElement(By.XPath(".."))).FindElement(By.CssSelector("div[class='attr_value']")).Text.Trim();
                //Описание лота
                var lotDescription = driver.FindElement(By.CssSelector("app-entity-attribute-simple[attributename='Описание лота']")).FindElement(By.CssSelector("div[class='attr_value']")).Text.Trim();
                //Субъект местонахождения имущества
                var locationSubject = ((driver.FindElement(By.XPath("//*[contains(text(), ' Субъект местонахождения имущества ')]"))).FindElement(By.XPath(".."))).FindElement(By.CssSelector("div[class='lotAttributeValue']")).Text.Trim();
                //Местонахождение имущества
                var location = driver.FindElement(By.CssSelector("app-entity-attribute-simple[attributename='Местонахождение имущества']")).FindElement(By.CssSelector("div[class='attr_value']")).Text.Trim();
                //Категория объекта
                var objectCategory = driver.FindElement(By.CssSelector("app-entity-attribute-simple[attributename='Категория объекта']")).FindElement(By.CssSelector("div[class='attr_value']")).Text.Trim();
                //Форма собственности
                var ownershipForm = ((driver.FindElement(By.XPath("//*[contains(text(), ' Форма собственности ')]"))).FindElement(By.XPath(".."))).FindElement(By.CssSelector("div[class='attr_value']")).Text.Trim();
                //Цель предоставления земельного участка
                //Нет у Земли сельскохозяйственного назначения, Земли населенных пунктов, Земли специального назначения, Земли лесного фонда, Земли водного фонда, Земельные участки (категория не установлена)
                //Есть у Земли особо охраняемых территорий и объектов, Земельные участки (не образованы)
                var landPurpose = "Нет данных";

                if (listOfCategoriesThatHavePurpose.Contains(category))
                {
                    landPurpose = ((driver.FindElement(By.XPath("//*[contains(text(), ' Цель предоставления земельного участка ')]"))).FindElement(By.XPath(".."))).FindElement(By.CssSelector("div[class='attr_value']")).Text.Trim();
                }

                if (db.FindByTitle(lotId) == null)
                {

                    string imgUrl = null;

                    try
                    {
                        imgUrl = driver.FindElement(By.CssSelector("img[class='selected-image-list-item']")).GetAttribute("src");
                        var imageBytes = new byte[0];
                        imageBytes = client.DownloadData(imgUrl);

                        db.SavingImageToDataBase(imageBytes, lotId);
                    }
                    catch (NoSuchElementException)
                    {
                        // Нет изображения
                    }

                    LotInfo lotInfo = new LotInfo()
                        {
                            NumberOfLot = lotId,
                            Title = lotTitle,
                            StartingPrice = startingPrice,
                            AuctionStep = auctionStep,
                            LotType = lotType,
                            LotSub = lotSub,
                            LotDescription = lotDescription,
                            LocationSubject = locationSubject,
                            Location = location,
                            ObjectCategory = objectCategory,
                            OwnershipForm = ownershipForm,
                            LandPurpose = landPurpose,
                            ImageUrl = imgUrl
                        };

                    db.AddToDataBase(lotInfo);

                }
            }

        }
        _navigationManager.NavigateTo("/");
        // закрытие браузера
        driver.Quit();
        
    }

}